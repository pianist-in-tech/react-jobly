{"ast":null,"code":"var SemVer = require('../classes/semver');\nvar parse = require('./parse');\nvar _require = require('../internal/re'),\n  re = _require.safeRe,\n  t = _require.t;\nvar coerce = function coerce(version, options) {\n  if (version instanceof SemVer) {\n    return version;\n  }\n  if (typeof version === 'number') {\n    version = String(version);\n  }\n  if (typeof version !== 'string') {\n    return null;\n  }\n  options = options || {};\n  var match = null;\n  if (!options.rtl) {\n    match = version.match(options.includePrerelease ? re[t.COERCEFULL] : re[t.COERCE]);\n  } else {\n    // Find the right-most coercible string that does not share\n    // a terminus with a more left-ward coercible string.\n    // Eg, '1.2.3.4' wants to coerce '2.3.4', not '3.4' or '4'\n    // With includePrerelease option set, '1.2.3.4-rc' wants to coerce '2.3.4-rc', not '2.3.4'\n    //\n    // Walk through the string checking with a /g regexp\n    // Manually set the index so as to pick up overlapping matches.\n    // Stop when we get a match that ends at the string end, since no\n    // coercible string can be more right-ward without the same terminus.\n    var coerceRtlRegex = options.includePrerelease ? re[t.COERCERTLFULL] : re[t.COERCERTL];\n    var next;\n    while ((next = coerceRtlRegex.exec(version)) && (!match || match.index + match[0].length !== version.length)) {\n      if (!match || next.index + next[0].length !== match.index + match[0].length) {\n        match = next;\n      }\n      coerceRtlRegex.lastIndex = next.index + next[1].length + next[2].length;\n    }\n    // leave it in a clean state\n    coerceRtlRegex.lastIndex = -1;\n  }\n  if (match === null) {\n    return null;\n  }\n  var major = match[2];\n  var minor = match[3] || '0';\n  var patch = match[4] || '0';\n  var prerelease = options.includePrerelease && match[5] ? \"-\".concat(match[5]) : '';\n  var build = options.includePrerelease && match[6] ? \"+\".concat(match[6]) : '';\n  return parse(\"\".concat(major, \".\").concat(minor, \".\").concat(patch).concat(prerelease).concat(build), options);\n};\nmodule.exports = coerce;","map":null,"metadata":{},"sourceType":"script"}