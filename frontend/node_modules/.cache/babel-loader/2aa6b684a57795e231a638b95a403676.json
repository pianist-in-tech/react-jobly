{"ast":null,"code":"import _slicedToArray from \"/Users/larisacapatina/Desktop/Coding/Unit_48/react-jobly/my-app-name/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\n\n/** Custom hook for keeping state data synced with localStorage.\n *\n * This creates `item` as state and look in localStorage for current value\n * (if not found, defaults to `firstValue`)\n *\n * When `item` changes, effect re-runs:\n * - if new state is null, removes from localStorage\n * - else, updates localStorage\n *\n * To the component, this just acts like state that is also synced to/from\n * localStorage::\n *\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\n */\n\nfunction useLocalStorage(key) {\n  var firstValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var initialValue = localStorage.getItem(key) || firstValue;\n  var _useState = useState(initialValue),\n    _useState2 = _slicedToArray(_useState, 2),\n    item = _useState2[0],\n    setItem = _useState2[1];\n  useEffect(function setKeyInLocalStorage() {\n    console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\n    if (item === null) {\n      localStorage.removeItem(key);\n    } else {\n      localStorage.setItem(key, item);\n    }\n  }, [key, item]);\n  return [item, setItem];\n}\nexport default useLocalStorage;","map":{"version":3,"names":["useState","useEffect","useLocalStorage","key","firstValue","arguments","length","undefined","initialValue","localStorage","getItem","_useState","_useState2","_slicedToArray","item","setItem","setKeyInLocalStorage","console","debug","removeItem"],"sources":["/Users/larisacapatina/Desktop/Coding/Unit_48/react-jobly/my-app-name/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\n/** Custom hook for keeping state data synced with localStorage.\n *\n * This creates `item` as state and look in localStorage for current value\n * (if not found, defaults to `firstValue`)\n *\n * When `item` changes, effect re-runs:\n * - if new state is null, removes from localStorage\n * - else, updates localStorage\n *\n * To the component, this just acts like state that is also synced to/from\n * localStorage::\n *\n *   const [myThing, setMyThing] = useLocalStorage(\"myThing\")\n */\n\nfunction useLocalStorage(key, firstValue = null) {\n  const initialValue = localStorage.getItem(key) || firstValue;\n\n  const [item, setItem] = useState(initialValue);\n\n  useEffect(function setKeyInLocalStorage() {\n    console.debug(\"hooks useLocalStorage useEffect\", \"item=\", item);\n\n    if (item === null) {\n      localStorage.removeItem(key);\n    } else {\n      localStorage.setItem(key, item);\n    }\n  }, [key, item]);\n\n  return [item, setItem];\n}\n\nexport default useLocalStorage;\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,eAAeA,CAACC,GAAG,EAAqB;EAAA,IAAnBC,UAAU,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;EAC7C,IAAMG,YAAY,GAAGC,YAAY,CAACC,OAAO,CAACP,GAAG,CAAC,IAAIC,UAAU;EAAC,IAAAO,SAAA,GAErCX,QAAQ,CAACQ,YAAY,CAAC;IAAAI,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAvCG,IAAI,GAAAF,UAAA;IAAEG,OAAO,GAAAH,UAAA;EAEpBX,SAAS,CAAC,SAASe,oBAAoBA,CAAA,EAAG;IACxCC,OAAO,CAACC,KAAK,CAAC,iCAAiC,EAAE,OAAO,EAAEJ,IAAI,CAAC;IAE/D,IAAIA,IAAI,KAAK,IAAI,EAAE;MACjBL,YAAY,CAACU,UAAU,CAAChB,GAAG,CAAC;IAC9B,CAAC,MAAM;MACLM,YAAY,CAACM,OAAO,CAACZ,GAAG,EAAEW,IAAI,CAAC;IACjC;EACF,CAAC,EAAE,CAACX,GAAG,EAAEW,IAAI,CAAC,CAAC;EAEf,OAAO,CAACA,IAAI,EAAEC,OAAO,CAAC;AACxB;AAEA,eAAeb,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module"}